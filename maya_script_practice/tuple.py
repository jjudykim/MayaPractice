# 튜플(tuple)은 몇 가지를 제외하고는 리스트와 거의 비슷하다
# 다른 점을 정리해보자면
# 1. 리스트는 [과 ]로 둘러 싸이지만 튜플은 (과 )로 둘러싸인다
# 2. 리스트는 그 값의 생성, 삭제, 수정이 가능하지만 튜플은 그 값을 바꿀 수 없다.

# 튜플을 만들어보자.
t = ()
t1 = (1, )
t2 = (1, 2, 3)
t3 = 1, 2, 3, 4
t4 = ("a", "b", ("cc", "dd"))

# 튜플은 리스트와 비슷하지만 두 가지 다른 점이 있다.
# 1. t = (1, )처럼 단지 한 개의 요소만을 가질 때는 요소 뒤에 반드시 콤마 ','를 붙여야 한다.
# 2. t = 1, 2, 3 처럼 괄호()를 생략해도 된다.

# 튜플과 리스트는 비슷한 역할을 하짐나 구분해서 사용하는 것이 좋다
# 튜플과 리스트의 가장 큰 차이는 '값을 변화시킬수 있는가? 없는가?'의 차이로,
# 보통 프로그램이 실행되는 동안 값이 변화되지 않기를 원하면 튜플을, 변화되기를 원하면 리스트를 사용한다.



# 튜플 만들고 내용 출력하기 ================================================

# 튜플은 값을 바꿀 수 없다는 점만 제외하면 리스트와 동일하기 때문에 리스트처럼 다양하게 처리할 수 있다.
new_t = (22, 11, 33, 44, 66)
print(new_t[1])  # 인덱싱하기
print(new_t[2:]) # 슬라이싱하기
print(new_t + new_t) # 더하기
print(new_t * 3) # 곱하기
print(min(new_t)) # 가장 작은 값 찾기
print(max(new_t)) # 가장 큰 값 찾기
print(sum(new_t)) # 들어있는 값을 모두 더하기
print(len(new_t)) # 들어있는 값의 개수를 세기



# 튜플에 오브젝트 넣고 확인하기 ================================================
list_ex = ["pCube1", "pCube2", "pCube3"]
print(list_ex)
# 리스트인 list_ex의 내용을 출력한다.

# 같은 오브젝트를 튜플에 넣는 것은 다음처럼 할 수 있다.
tuple_ex = ("pCube1", "pCube2", "pCube3")
print(tuple_ex)
# 튜플인 list_ex의 내용을 출력한다.